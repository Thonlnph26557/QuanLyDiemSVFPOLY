@page "/sinhvien/themmoi"

@using QLDSVFPOLY.BUS.ViewModels.ChuyenNganh
@using QLDSVFPOLY.BUS.ViewModels.SinhVien
@using QLDSVFPOLY.Blazor.Repository.Implements
@using QLDSVFPOLY.Blazor.Repository.Interfaces

@using QLDSVFPOLY.Blazor.Components
@using QLDSVFPOLY.Blazor.Pages.Confirmation


@inject IToastService ToastService
@inject ISessionStorageService _SStorage

@inject IJSRuntime JS


@if (_listSinhViens == null || _listChuyenNganh == null)
{
    <LoadingIndicator></LoadingIndicator>
}
else
{

<MudText Typo="Typo.h5">Thêm Sinh Viên</MudText>

<MudContainer class="d-flex justify-center align-center w-70 h-75">

    <style>
        #dd {
            border: 1px black;
            width: 17vw;
            height: 46vh;
            margin-left: 10px;
        }
    </style>


    <EditForm Model="@sinhVien">

        <DataAnnotationsValidator></DataAnnotationsValidator>


         <MudGrid class="w-25" style="float: left; margin-top:20px">

        <MudImage Src="@imgUrl" Elevation="25" Class="rounded-lg w-100" Style="background-color: black;"  Fluid="true"/>
<InputFile OnChange="@OnInputFileChanged"></InputFile>

        </MudGrid>

        <MudGrid class="w-75" Style="float: right;padding-left:20px;">

            <MudGrid class="row">

                <MudItem class="col">

                    <MudTextField Label="Mã Sinh Viên" class="form-control" @bind-Value="sinhVien.Ma" For="() => sinhVien.Ma"></MudTextField>

                </MudItem>

                <MudItem class="col">

                    <MudTextField Label="Email" class="form-control" @bind-Value="sinhVien.Email" For="() => sinhVien.Email"></MudTextField>

                </MudItem>

            </MudGrid>

            <MudGrid class="row" style="margin-top:10px">

                <MudItem class="col">

                    <MudTextField Label="Họ" class="form-control" @bind-Value="sinhVien.Ho" For="() => sinhVien.Ho"></MudTextField>

                </MudItem>

                <MudItem class="col">

                    <MudTextField T="DateTime?" class="form-control" Format="yyyy/MM/dd" Label="Ngày Nhập Học" InputType="InputType.Date"></MudTextField>

                </MudItem>

            </MudGrid>


            <MudGrid class="row" style="margin-top:10px">

                <MudItem class="col">

                    <MudTextField Label="Tên Đệm" class="form-control" @bind-Value="sinhVien.TenDem" For="() => sinhVien.TenDem"></MudTextField>

                </MudItem>

                <MudItem class="col">

                    <MudTextField Label="Số Điện Thoại" class="form-control" @bind-Value="sinhVien.SoDienThoai" For="() => sinhVien.SoDienThoai"></MudTextField>

                </MudItem>

            </MudGrid>


            <MudGrid class="row" style="margin-top:10px">

                <MudItem class="col">

                    <MudTextField Label="Tên" class="form-control" @bind-Value="sinhVien.Ten" For="() => sinhVien.Ten"></MudTextField>

                </MudItem>

                <MudItem class="col">

                    <MudSelect T="int" Label="Trạng Thái" AnchorOrigin="Origin.BottomCenter" @bind-Value="sinhVien.TrangThai">

                        <MudSelectItem Value=1>Đang học</MudSelectItem>
                        <MudSelectItem Value=2>Đang nghỉ học</MudSelectItem>

                    </MudSelect>

                </MudItem>

            </MudGrid>


            <MudGrid class="row" style="margin-top:10px">

                <MudItem class="col">

                    <MudSelect T="int" Label="Giới Tính" AnchorOrigin="Origin.BottomCenter" @bind-Value="sinhVien.GioiTinh">

                        <MudSelectItem Value=0>Nam</MudSelectItem>
                        <MudSelectItem Value=1>Nữ</MudSelectItem>

                    </MudSelect>

                </MudItem>

                <MudItem class="col">

                    <MudSelect T="Guid" Label="Chuyên Ngành" AnchorOrigin="Origin.BottomCenter" @bind-Value="sinhVien.IdChuyenNganh">

                        @foreach (var i in _listChuyenNganh)
                        {
                            <MudSelectItem Value="i.Id">@i.TenChuyenNganh</MudSelectItem>
                        }
                    </MudSelect>

                </MudItem>

            </MudGrid>


            <MudGrid class="row" style="margin-top:10px">

                <MudItem class="col">

                    <MudTextField T="DateTime?" class="form-control" Format="yyyy/MM/dd" Label="Ngày Sinh" InputType="InputType.Date"></MudTextField>

                </MudItem>

                <MudItem class="col">

                    <MudTextField Label="Địa Chỉ" class="form-control" @bind-Value="sinhVien.DiaChi" For="() => sinhVien.DiaChi"></MudTextField>

                </MudItem>

            </MudGrid>


            <MudGrid class="row" style="margin-top:10px">

                <MudItem class="col">
                </MudItem>

                <MudItem class="col">

                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="btn btn-primary" style="float:left" @onclick="()=>ReLoad()">LÀM MỚI</MudButton>

                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="btn btn-primary" style="float:left" @onclick="()=>Them()">THÊM</MudButton>

                </MudItem>

            </MudGrid>

        </MudGrid>

    </EditForm>

</MudContainer>
}

<Confirmation ConfirmationMessage="Bạn có muốn thêm thông tin sinh viên không?" ConfirmationTitle="Thông báo" @ref="_confirmThem" ConfirmationChanged="()=>Them()"></Confirmation>


@code {

    //
    protected Confirmation _confirmThem { get; set; }

    private async Task ShowConfirmThem()
    {
        _confirmThem.show();
    }


    //
    private SinhVienCreateVM sinhVien = new();

    //
    [Inject] private ISinhVienRepo sinhVienRepos { set; get; }

    //
    private async Task Them()
    {
        sinhVien.DuongDanAnh = imgUrl;
        sinhVien.MatKhau = "aa";
        sinhVien.TenDangNhap = "png";
        //sinhVien.IdChuyenNganh = Guid.Parse("D26286EF-2FAD-40B2-954D-4B629FCE5E67");
        await sinhVienRepos.CreateAsync(sinhVien);


        bool x = await sinhVienRepos.CreateAsync(sinhVien);

        if (x == true)
        {
            ToastService.ShowSuccess($"Thêm thành công");
        }
        else
        {
            ToastService.ShowError($"Thêm thất bại");
        }


    }


    //
    private async Task ReLoad()
    {
        sinhVien.Ma = null;
        sinhVien.Ho = null;
        sinhVien.TenDem = null;
        sinhVien.Ten = null;
        sinhVien.GioiTinh = 0;
        sinhVien.NgaySinh = DateTime.Now;
        sinhVien.Email = null;
        sinhVien.TenDangNhap = null;
        sinhVien.MatKhau = null;
        sinhVien.DuongDanAnh = null;
        sinhVien.SoDienThoai = null;
        sinhVien.DiaChi = null;
        sinhVien.TrangThai = 0;
        sinhVien.IdChuyenNganh = Guid.Empty;
    }

    //
    [Parameter]
    public string idDaoTao { get; set; }



    // Khai báo
    private List<SinhVienVM> _listSinhViens;

    private SinhVienSearchVM _search = new SinhVienSearchVM();

    [Inject] private IChuyenNganhRepo chuyenNganhRepo { set; get; }


    private List<ChuyenNganhVM> _listChuyenNganh;

    private ChuyenNganhSearchVM _searchVM = new ChuyenNganhSearchVM();


    //Ghi đè phương thức OnInitializedAsync
    protected override async Task OnInitializedAsync()
    {
        idDaoTao = await _SStorage.GetItemAsync<string>("IdDaoTao"); 
        await ReLoad();

        await LoadData();
    }


    //
    private async Task LoadData()
    {
        _listChuyenNganh = await chuyenNganhRepo.GetAllActiveAsync(_searchVM);

        _listChuyenNganh = _listChuyenNganh.Where(c => c.IdDaoTao == Guid.Parse(idDaoTao)).ToList();



        _listSinhViens = await sinhVienRepos.GetAllActiveAsync(_search);
        //_listSinhViens = _listSinhViens.Where(c => _listChuyenNganh.Any(x => x.Id == c.IdChuyenNganh))

        foreach (var item in _listSinhViens)
        {
            if (_listChuyenNganh.Any(c => c.Id == item.IdChuyenNganh))
            {

            }
            else
            {
                _listSinhViens.Remove(item);
            }
        }
    }

    DefaultImages defImg = new DefaultImages();
    string imgUrl;
    IJSObjectReference module;
    record ImageDimensions(int Width, int Height);
    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var streamRef = new DotNetStreamReference(file.OpenReadStream(file.Size));
        var json = await module.InvokeAsync<string>("getImageDimensions", streamRef);
        var dimensions = JsonSerializer.Deserialize<ImageDimensions>(json);
        if (dimensions.Width > 250)
        {
            file = await file.RequestImageFileAsync(file.ContentType, 250, int.MaxValue);
        }
        var buffers = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffers);
        string imageType = file.ContentType;
        imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
    }


}
