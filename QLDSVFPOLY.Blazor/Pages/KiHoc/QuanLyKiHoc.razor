@page "/kihoc/chitietkihoc"
@using QLDSVFPOLY.BUS.ViewModels.KiHoc
@using QLDSVFPOLY.Blazor.Components
@using QLDSVFPOLY.Blazor.Repository.Interfaces
@*@layout TestLayout*@
@if(listKiHocs == null)
{
    <LoadingIndicator></LoadingIndicator>
}
else
{
<h1>Kì Học</h1>
<form>
    <div class="w-100" style="margin-top:20px; margin: 0 auto ">
        <div class="row" style="margin-top:15px">
            <div class="col">
                <label>Tên</label>
                <input @bind="Ten" type="text" class="form-control">
                @*<MudTextField @bind-Value="TextValue" Label="Tên"  Variant="Variant.Outlined" />*@
            </div>
            <div class="col">
                <label>Ngày Bắt Đầu</label>
                <input @bind="NgayBatDau" type="date" class="form-control">
                @*<MudTextField T="DateTime?" Format="yyyy-MM-dd" Label="Ngày Bắt Đầu"  InputType="InputType.Date"/>*@
            </div>
        </div>
        <div class="row" style="margin-top:15px">
            <div class="col">
                <label>Năm Học</label>
                <select @bind="NamHoc" type="int" class="form-control">
                        @for(int i=2010; i<= DateTime.Now.Year+3;i++)
                        {
                            <option selected value="@i">@i</option>
                        }
                </select>
            </div> 
            <div class="col">
                <label>Ngày Kết Thúc</label>
                <input @bind="NgayKetThuc" type="date" class="form-control">
                @*<MudTextField T="DateTime?" Format="yyyy-MM-dd" Label="Ngày Kết Thúc"  InputType="InputType.Date"/>*@
            </div>
        </div>
        <div class="row" style="margin-top:15px">
            <div class="col">
                <label>Trạng Thái</label>
                <select @bind="TrangThai" type="int" class="form-control">
                    <option value="1">Hoạt Động</option>
                    <option value="0">Không Hoạt Động</option>
                </select>
            </div> 
            <div class="col"></div> 
        </div>
        <div class="row" style="margin-top:15px">
            <div class="col"></div>  
            <div class="col">
                <button type="button" class="btn btn-primary" style="float:right;" @onclick="SuaKiHoc">CHỈNH SỬA</button>
                <button type="button" class="btn btn-primary" style="float:right;margin-right:30px" @onclick="LamMoi">LÀM MỚI</button>
                <button type="button" class="btn btn-primary" style="float:right;margin-right:30px" @onclick="ThemKiHoc">THÊM MỚI</button>
                @*<MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Info" Style="float:right">Thêm</MudButton>*@
            </div>  
        </div>
    </div>
    </form>
    <div style="clear:both"></div>
    <h1 style="margin-top: 50px">Danh Sách Kì Học</h1>


    <table class="table">
	    <thead>
		    <tr>
			    <th scope="col">STT</th>
			    <th scope="col">Tên</th>
			    <th scope="col">Năm Học</th>
			    <th scope="col">Ngày Bắt Đầu</th>
			    <th scope="col">Ngày Kết Thúc</th>
			    <th scope="col">Bản Ghi</th>
			    <th scope="col">Xóa</th>
		    </tr>
	    </thead>
	    <tbody>
            @for (int i=0;i< listKiHocs.Count();i++)
            {
                var item = listKiHocs[i];
                <tr>
                    <th scope="row">@(i+1)</th>
			        <td>@item.Ten</td>
			        <td>@item.NamHoc</td>
			        <td>@item.NgayBatDau</td>
			        <td>@item.NgayKetThuc</td>
                    <td><button type="button" class="btn btn-primary" @onclick="()=>LoadBanGhi(item.Id)">Bản ghi</button></td>
                    <td><button type="button" class="btn btn-danger" @onclick="()=>OnDeleteKiHoc(item.Id)">Xóa</button></td>
			        @*<td><MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small">Delete</MudButton></td>*@
		        </tr>
            }
	    </tbody>
    </table>
}




@code {
    [Parameter]
    public string idDaoTao { get; set; }
    [Inject] private HttpClient httpClient { get; set; }

    //Inject Repo cua KiHoc
    [Inject] private IKiHocRepos KiHocRepos { get; set; }

    //Khai bao ra listKiHoc
    private List<KiHocViewmodel> listKiHocs;
    private KiHocSearchViewmodel searchVM = new KiHocSearchViewmodel();

    //Id khi xoa

    protected override async Task OnInitializedAsync()
    {
        //Gan listKiHocs = GetAll de lay ra list
        await LoadData();
    }
    private async Task LoadData()
    {
        listKiHocs = await KiHocRepos.GetAllActiveAsync(searchVM);
    }
    public async Task OnDeleteKiHoc(Guid deleteId)
    {
        await KiHocRepos.RemoveAsync(deleteId);
        await LoadData();
    }


    //Thêm
    public string Ten { get; set; }
    public int NamHoc { get; set; }
    public DateTime NgayBatDau = DateTime.Now;
    public DateTime NgayKetThuc = DateTime.Now;
    public int TrangThai { get; set; }
    public Guid Id { get; set; }
    private KiHocCreateViewmodel createVm = new KiHocCreateViewmodel();
        private async Task ThemKiHoc()
        {
            createVm.Ten = Ten;
            createVm.NamHoc = NamHoc;
            createVm.NgayBatDau = NgayBatDau;
            createVm.NgayKetThuc = NgayKetThuc;
            createVm.TrangThai = TrangThai;
            int x = await KiHocRepos.CreateAsync(createVm);
            await LoadData();
            Id = Guid.Empty;
            Ten = null;
            NamHoc = DateTime.Now.Year;
            NgayBatDau = DateTime.Now;
            NgayKetThuc = DateTime.Now;
            TrangThai = 0;
        }
        private async Task LoadBanGhi(Guid id)
        {
            KiHocViewmodel kiHocVM = await KiHocRepos.GetByIdAsync(id);
            Ten = kiHocVM.Ten;
            NamHoc = kiHocVM.NamHoc;
            NgayBatDau = kiHocVM.NgayBatDau;
            NgayKetThuc = kiHocVM.NgayKetThuc;
            TrangThai= kiHocVM.TrangThai;
            Id = kiHocVM.Id;
        }
        private KiHocUpdateViewmodel updateVm = new KiHocUpdateViewmodel();
        private async Task SuaKiHoc()
        {
            updateVm.Ten = Ten;
            updateVm.NamHoc = NamHoc;
            updateVm.NgayBatDau = NgayBatDau;
            updateVm.NgayKetThuc = NgayKetThuc;
            updateVm.TrangThai = TrangThai;
            int x = await KiHocRepos.UpdateAsync(Id,updateVm);
            await LoadData();
            Id = Guid.Empty;
            Ten = null;
            NamHoc = DateTime.Now.Year;
            NgayBatDau = DateTime.Now;
            NgayKetThuc = DateTime.Now;
            TrangThai = 0;
        }
        private async Task LamMoi()
        {
            Id = Guid.Empty;
            Ten = null;
            NamHoc = DateTime.Now.Year;
            NgayBatDau = DateTime.Now;
            NgayKetThuc = DateTime.Now;
            TrangThai = 0;
        }
}