@page "/chitietdiem/{idSinhVien}/{idCTLH}"
@using QLDSVFPOLY.BUS.ViewModels.ChiTietDiemSo
@using QLDSVFPOLY.BUS.ViewModels.ChiTietLopHoc
@using QLDSVFPOLY.BUS.ViewModels.DiemSo
@using QLDSVFPOLY.BUS.ViewModels.LopHoc
@using QLDSVFPOLY.BUS.ViewModels.SinhVien
@using QLDSVFPOLY.Blazor.Repository.Interfaces
@using QLDSVFPOLY.Blazor.Components



@if (listDiemSos == null
									|| listCTDiemSos == null || listLopHocs == null)
{
	<LoadingIndicator></LoadingIndicator>
}
else
{
	<h4>Mã Lớp Học: @listLopHocs.FirstOrDefault(c => c.Id == @listCTLHs.FirstOrDefault(x=>x.Id==Guid.Parse(idCTLH)).IdLopHoc).Ma</h4>
	<br />
	<table class="table">
		<thead>
			<tr>
				<th scope="col">STT</th>
				<th scope="col">Tên Đầu Điểm</th>
				<th scope="col">Trọng Số</th>
				<th scope="col">Điểm</th>
				<th scope="col">Trạng Thái</th>
			</tr>
		</thead>
		<tbody>
			@for (int i = 0; i < listCTDiemSos.Count(); i++)
			{
				var item = listCTDiemSos[i];
				<tr>
					<th scope="row">@(i+1)</th>
					<td>@listDiemSos.FirstOrDefault(c=>c.Id==@item.IdDiemSo).TenDauDiem</td>
					<td>@listDiemSos.FirstOrDefault(c=>c.Id==@item.IdDiemSo).TrongSo</td>
					<td>@item.Diem</td>
					@if (@item.TrangThai == 1)
					{
						<td>Hoạt động</td>
					}
					else
					{
						<td>Tạm dừng hoạt động</td>
					}
				</tr>
			}
			<tr><td style="color:red;">Điểm trung bình: 
					@Math.Round(@TinhDiem(Guid.Parse(idSinhVien),Guid.Parse(idCTLH)),2)
				</td></tr>
		</tbody>
	</table>
}

@code {
	[Parameter]
	public string idSinhVien { set; get; }

	[Parameter]
	public string idCTLH { set; get; }


	//DiemSo
	[Inject] private IDiemSoRepos diemSoRepo { set; get; }
	private List<DiemSoVM> listDiemSos;
	private DiemSoSearchVM diemSoSearchVm = new DiemSoSearchVM();

	//cTDiemSo
	[Inject] private IChiTietDiemSoRepo cTDiemSoRepo { set; get; }
	private List<ChiTietDiemSoVM> listCTDiemSos;
	private ChiTietDiemSoSearchVM cTDiemSoSearchVm = new ChiTietDiemSoSearchVM();

	//ChiTietLopHoc
	[Inject] private IChiTietLopHocRepos CTLHRepo { set; get; }
	private List<ChiTietLopHocVM> listCTLHs;
	private ChiTietLopHocSearchVM searchCTLHVm = new ChiTietLopHocSearchVM();


	//LopHoc
	[Inject] private ILopHocRepos lopHocRepo { set; get; }
	private List<LopHocVM> listLopHocs;
	private LopHocSearchVM lopHocSearchVm = new LopHocSearchVM();

	//SinhVien
	[Inject] private ISinhVienRepo sinhVienRepo { set; get; }
	private List<SinhVienVM> listSinhViens;
	private SinhVienSearchVM sinhVienSearchVm = new SinhVienSearchVM();

	protected override async Task OnInitializedAsync()
	{
		idSinhVien = "4184e7d6-5f1d-4f9e-ab36-118f6d329cf5";

		await LoadData();
	}

	private async Task LoadData()
	{
		listDiemSos = await diemSoRepo.GetAllActiveAsync(diemSoSearchVm);
		listCTDiemSos = await cTDiemSoRepo.GetAllActiveAsync(cTDiemSoSearchVm);
		//CTDiemSo cua SV
		listCTDiemSos = listCTDiemSos.Where(c => c.IdSinhVien == Guid.Parse(idSinhVien)).ToList();
		//list IdCTLH
		var listIdCTLH = listCTDiemSos.GroupBy(c => c.IdChiTietLopHoc).Select(x => x.Key).ToList();
		listCTLHs = await CTLHRepo.GetAllActiveAsync(searchCTLHVm);
		listCTLHs = listCTLHs.Where(c => listIdCTLH.Any(x => x == c.Id)).ToList();

		listLopHocs = await lopHocRepo.GetAllActiveAsync(lopHocSearchVm);

		listSinhViens = await sinhVienRepo.GetAllActiveAsync(sinhVienSearchVm);


		string maLH = listLopHocs.FirstOrDefault(c => c.Id == listCTLHs.FirstOrDefault(x => x.Id == Guid.Parse(idCTLH)).IdLopHoc).Ma;
	}

	private double TinhDiem(Guid idSV, Guid idCTLopHoc)
	{
		try
		{
			var listDiem = listCTDiemSos.Where(c => c.IdSinhVien == idSV && c.IdChiTietLopHoc == idCTLopHoc).
	Select(c => new { c.Diem, listDiemSos.FirstOrDefault(x => x.Id == c.IdDiemSo).TrongSo }).ToList();

			double diemTB = 0;
			foreach (var i in listDiem)
			{
				diemTB += i.Diem * i.TrongSo / 100;
			}
			return diemTB;
		}
		catch
		{
			return 0;
		}
	}

}
